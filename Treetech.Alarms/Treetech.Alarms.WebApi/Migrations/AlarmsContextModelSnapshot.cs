// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Treetech.Alarms.WebApi.Contexts;

namespace Treetech.Alarms.WebApi.Migrations
{
    [DbContext(typeof(AlarmsContext))]
    partial class AlarmsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Treetech.Alarms.WebApi.Models.Alarme", b =>
                {
                    b.Property<int>("IdAlarme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DataCadastro")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("Descricao")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<int>("IdClassificacao")
                        .HasColumnType("int");

                    b.Property<int>("IdEquipamento")
                        .HasColumnType("int");

                    b.HasKey("IdAlarme");

                    b.HasIndex("IdClassificacao");

                    b.HasIndex("IdEquipamento");

                    b.ToTable("Alarmes");
                });

            modelBuilder.Entity("Treetech.Alarms.WebApi.Models.AlarmeAtuado", b =>
                {
                    b.Property<int>("IdAlarmeAtuado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnName("Ativo")
                        .HasColumnType("BIT");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnName("DataEntrada")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DataSaida")
                        .HasColumnName("DataEntrada")
                        .HasColumnType("DATETIME");

                    b.Property<int>("IdAlarme")
                        .HasColumnType("int");

                    b.HasKey("IdAlarmeAtuado");

                    b.HasIndex("IdAlarme");

                    b.ToTable("AlarmesAtuados");
                });

            modelBuilder.Entity("Treetech.Alarms.WebApi.Models.ClassificacaoAlarme", b =>
                {
                    b.Property<int>("IdClassificacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomeClassificacao")
                        .IsRequired()
                        .HasColumnName("NomeClassificacao")
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("IdClassificacao");

                    b.ToTable("ClassificacoesAlarme");

                    b.HasData(
                        new
                        {
                            IdClassificacao = 1,
                            NomeClassificacao = "Baixo"
                        },
                        new
                        {
                            IdClassificacao = 2,
                            NomeClassificacao = "Médio"
                        },
                        new
                        {
                            IdClassificacao = 3,
                            NomeClassificacao = "Alto"
                        });
                });

            modelBuilder.Entity("Treetech.Alarms.WebApi.Models.Equipamento", b =>
                {
                    b.Property<int>("IdEquipamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnName("DataCadastro")
                        .HasColumnType("DATETIME");

                    b.Property<int>("IdTipo")
                        .HasColumnType("int");

                    b.Property<string>("NomeEquipamento")
                        .IsRequired()
                        .HasColumnName("NomeEquipamento")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("NumeroSerie")
                        .IsRequired()
                        .HasColumnName("NumeroSerie")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("IdEquipamento");

                    b.HasIndex("IdTipo");

                    b.ToTable("Equipamentos");
                });

            modelBuilder.Entity("Treetech.Alarms.WebApi.Models.TipoEquipamento", b =>
                {
                    b.Property<int>("IdTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomeTipo")
                        .IsRequired()
                        .HasColumnName("NomeTipo")
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("IdTipo");

                    b.ToTable("TiposEquipamento");

                    b.HasData(
                        new
                        {
                            IdTipo = 1,
                            NomeTipo = "Tensão"
                        },
                        new
                        {
                            IdTipo = 2,
                            NomeTipo = "Corrente"
                        },
                        new
                        {
                            IdTipo = 3,
                            NomeTipo = "Óleo"
                        });
                });

            modelBuilder.Entity("Treetech.Alarms.WebApi.Models.Alarme", b =>
                {
                    b.HasOne("Treetech.Alarms.WebApi.Models.ClassificacaoAlarme", "Classificacao")
                        .WithMany("Alarmes")
                        .HasForeignKey("IdClassificacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Treetech.Alarms.WebApi.Models.Equipamento", "Equipamento")
                        .WithMany("Alarmes")
                        .HasForeignKey("IdEquipamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Treetech.Alarms.WebApi.Models.AlarmeAtuado", b =>
                {
                    b.HasOne("Treetech.Alarms.WebApi.Models.Alarme", "Alarme")
                        .WithMany("AlarmesAtuados")
                        .HasForeignKey("IdAlarme")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Treetech.Alarms.WebApi.Models.Equipamento", b =>
                {
                    b.HasOne("Treetech.Alarms.WebApi.Models.TipoEquipamento", "Tipo")
                        .WithMany("Equipamentos")
                        .HasForeignKey("IdTipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
